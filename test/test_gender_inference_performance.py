# The following code was generated by the AI assistant [Claude Sonnet 4]

import logging
import pandas as pd
import pytest
import time
from pathlib import Path
from typing import Dict, Tuple, List
import gender_guesser.detector as gender

# Import the new implementation
from actions.generators.GenderInferrer import GenderInferrer

# Define the original guessGender function inline to avoid import issues
def guessGender(name: str) -> str:
    """
    Original guessGender function from inferGender.py
    1) Try d.get_gender(name) on the full string.
    2) If that returns 'unknown' and there's more than one token,
       try again with just the first token.
    3) Return whatever d.get_gender(...) returns (e.g. 'male','mostly_female','andy','unknown', etc.).
    """
    d = gender.Detector(case_sensitive=False)
    
    if not isinstance(name, str) or name.strip() == "":
        return "unknown"

    raw = d.get_gender(name)
    if raw != 'unknown':
        return raw

    tokens = name.strip().split()
    if len(tokens) > 1:
        return d.get_gender(tokens[0])
    return raw

LOGS_DIR = Path(__file__).parent.parent / "logs" / "test_results"
LOGS_DIR.mkdir(parents=True, exist_ok=True)

def setup_test_logger(test_name):
    """Set up a logger for a specific test"""
    logger = logging.getLogger(test_name)
    logger.setLevel(logging.INFO)

    # Remove all handlers associated with the logger
    if logger.hasHandlers():
        logger.handlers.clear()

    # Create a file handler
    log_file = LOGS_DIR / f"{test_name}.log"
    fh = logging.FileHandler(log_file, mode='w')
    fh.setLevel(logging.INFO)

    # Create a formatter
    formatter = logging.Formatter('%(asctime)s - %(message)s')
    fh.setFormatter(formatter)

    # Add the handler to the logger
    logger.addHandler(fh)

    return logger

@pytest.fixture
def sample_names():
    """Load sample father names from bautismos_clean.csv"""
    csv_path = Path(__file__).parent.parent / "data" / "clean" / "bautismos_clean.csv"
    df = pd.read_csv(csv_path)
    
    # Get father_name column and remove empty/null values
    father_names = df['father_name'].dropna()
    father_names = father_names[father_names != '']
    
    # Take a sample of 500 names for testing (adjust as needed)
    sample_size = min(500, len(father_names))
    sample_names = father_names.sample(n=sample_size, random_state=42).reset_index(drop=True)
    
    return sample_names

class GenderInferenceResults:
    """Class to store and analyze gender inference results"""
    
    def __init__(self, method_name: str):
        self.method_name = method_name
        self.results = []
        self.execution_time = 0.0
        self.identified_count = 0
        self.male_count = 0
        self.female_count = 0
        self.unknown_count = 0
        self.other_count = 0  # For categories like 'mostly_male', 'andy', etc.
    
    def add_result(self, name: str, gender: str):
        """Add a gender inference result"""
        self.results.append((name, gender))
        
        if gender != 'unknown':
            self.identified_count += 1
            
        if gender == 'male' or gender == 'mostly_male':
            self.male_count += 1
        elif gender == 'female' or gender == 'mostly_female':
            self.female_count += 1
        elif gender == 'unknown':
            self.unknown_count += 1
        else:
            self.other_count += 1
    
    def set_execution_time(self, time_seconds: float):
        """Set the execution time for this method"""
        self.execution_time = time_seconds
    
    def get_summary(self) -> Dict:
        """Get a summary of the results"""
        total_names = len(self.results)
        return {
            'method': self.method_name,
            'total_names': total_names,
            'identified_count': self.identified_count,
            'identified_percentage': (self.identified_count / total_names * 100) if total_names > 0 else 0,
            'male_count': self.male_count,
            'male_percentage': (self.male_count / total_names * 100) if total_names > 0 else 0,
            'female_count': self.female_count,
            'female_percentage': (self.female_count / total_names * 100) if total_names > 0 else 0,
            'unknown_count': self.unknown_count,
            'unknown_percentage': (self.unknown_count / total_names * 100) if total_names > 0 else 0,
            'other_count': self.other_count,
            'other_percentage': (self.other_count / total_names * 100) if total_names > 0 else 0,
            'execution_time': self.execution_time,
            'names_per_second': total_names / self.execution_time if self.execution_time > 0 else 0
        }

def test_original_infergender_function(sample_names):
    """Test the original inferGender.py guessGender function"""
    logger = setup_test_logger("test_original_infergender")
    logger.info("Testing original inferGender.py guessGender function")
    
    results = GenderInferenceResults("Original guessGender")
    
    # Measure execution time
    start_time = time.time()
    
    for name in sample_names:
        gender = guessGender(name)
        results.add_result(name, gender)
        logger.info(f"Name: '{name}' -> Gender: '{gender}'")
    
    end_time = time.time()
    results.set_execution_time(end_time - start_time)
    
    summary = results.get_summary()
    logger.info(f"Original inferGender Summary: {summary}")
    
    return results

def test_new_genderinferrer_class(sample_names):
    """Test the new GenderInferrer.py class"""
    logger = setup_test_logger("test_new_genderinferrer")
    logger.info("Testing new GenderInferrer.py class")
    
    results = GenderInferenceResults("New GenderInferrer")
    
    # Initialize the GenderInferrer
    inferrer = GenderInferrer(sample_names)
    
    # Measure execution time
    start_time = time.time()
    
    # Use the infer_from_names method
    gender_series = inferrer.infer_from_names()
    
    end_time = time.time()
    results.set_execution_time(end_time - start_time)
    
    # Process results
    for idx, (name, gender) in enumerate(zip(sample_names, gender_series)):
        results.add_result(name, gender)
        logger.info(f"Name: '{name}' -> Gender: '{gender}'")
    
    summary = results.get_summary()
    logger.info(f"New GenderInferrer Summary: {summary}")
    
    return results

def test_gender_inference_performance_comparison(sample_names):
    """Compare performance between both gender inference methods"""
    logger = setup_test_logger("test_performance_comparison")
    logger.info("Starting performance comparison between gender inference methods")
    logger.info(f"Testing with {len(sample_names)} father names from bautismos_clean.csv")
    
    # Test original method
    original_results = test_original_infergender_function(sample_names)
    
    # Test new method
    new_results = test_new_genderinferrer_class(sample_names)
    
    # Compare results
    orig_summary = original_results.get_summary()
    new_summary = new_results.get_summary()
    
    logger.info("=== PERFORMANCE COMPARISON RESULTS ===")
    logger.info(f"Original guessGender method:")
    logger.info(f"  - Total names processed: {orig_summary['total_names']}")
    logger.info(f"  - Names identified (non-unknown): {orig_summary['identified_count']} ({orig_summary['identified_percentage']:.2f}%)")
    logger.info(f"  - Male names identified: {orig_summary['male_count']} ({orig_summary['male_percentage']:.2f}%)")
    logger.info(f"  - Female names identified: {orig_summary['female_count']} ({orig_summary['female_percentage']:.2f}%)")
    logger.info(f"  - Unknown gender: {orig_summary['unknown_count']} ({orig_summary['unknown_percentage']:.2f}%)")
    logger.info(f"  - Other categories: {orig_summary['other_count']} ({orig_summary['other_percentage']:.2f}%)")
    logger.info(f"  - Execution time: {orig_summary['execution_time']:.4f} seconds")
    logger.info(f"  - Processing speed: {orig_summary['names_per_second']:.2f} names/second")
    
    logger.info(f"\nNew GenderInferrer method:")
    logger.info(f"  - Total names processed: {new_summary['total_names']}")
    logger.info(f"  - Names identified (non-unknown): {new_summary['identified_count']} ({new_summary['identified_percentage']:.2f}%)")
    logger.info(f"  - Male names identified: {new_summary['male_count']} ({new_summary['male_percentage']:.2f}%)")
    logger.info(f"  - Female names identified: {new_summary['female_count']} ({new_summary['female_percentage']:.2f}%)")
    logger.info(f"  - Unknown gender: {new_summary['unknown_count']} ({new_summary['unknown_percentage']:.2f}%)")
    logger.info(f"  - Other categories: {new_summary['other_count']} ({new_summary['other_percentage']:.2f}%)")
    logger.info(f"  - Execution time: {new_summary['execution_time']:.4f} seconds")
    logger.info(f"  - Processing speed: {new_summary['names_per_second']:.2f} names/second")
    
    # Performance differences
    identification_diff = new_summary['identified_count'] - orig_summary['identified_count']
    male_diff = new_summary['male_count'] - orig_summary['male_count']
    time_diff = new_summary['execution_time'] - orig_summary['execution_time']
    speed_ratio = new_summary['names_per_second'] / orig_summary['names_per_second'] if orig_summary['names_per_second'] > 0 else 0
    
    logger.info(f"\n=== DIFFERENCES ===")
    logger.info(f"Identification difference: {identification_diff} names ({'+'if identification_diff >= 0 else ''}{identification_diff})")
    logger.info(f"Male identification difference: {male_diff} names ({'+'if male_diff >= 0 else ''}{male_diff})")
    logger.info(f"Execution time difference: {'+'if time_diff >= 0 else ''}{time_diff:.4f} seconds")
    logger.info(f"Speed ratio (new/original): {speed_ratio:.2f}x")
    
    # Assertions to validate the test
    assert orig_summary['total_names'] > 0, "Original method should process some names"
    assert new_summary['total_names'] > 0, "New method should process some names"
    assert orig_summary['total_names'] == new_summary['total_names'], "Both methods should process the same number of names"
    
    # Check if results are consistent (allowing for minor differences due to implementation)
    consistency_tolerance = 5  # Allow up to 5 names difference
    assert abs(identification_diff) <= consistency_tolerance, f"Identification results should be consistent within {consistency_tolerance} names"
    
    logger.info("Performance comparison test completed successfully!")
    
    return {
        'original': orig_summary,
        'new': new_summary,
        'differences': {
            'identification_diff': identification_diff,
            'male_diff': male_diff,
            'time_diff': time_diff,
            'speed_ratio': speed_ratio
        }
    }

def test_detailed_gender_categories_comparison(sample_names):
    """Compare the detailed gender categories returned by both methods"""
    logger = setup_test_logger("test_detailed_categories")
    logger.info("Testing detailed gender categories comparison")
    
    # Test a smaller sample for detailed analysis
    small_sample = sample_names.head(50)
    
    category_comparison = {}
    
    for name in small_sample:
        original_result = guessGender(name)
        
        inferrer = GenderInferrer(pd.Series([name]))
        new_result = inferrer.infer_from_names().iloc[0]
        
        if name not in category_comparison:
            category_comparison[name] = {}
        
        category_comparison[name]['original'] = original_result
        category_comparison[name]['new'] = new_result
        category_comparison[name]['match'] = original_result == new_result
        
        logger.info(f"Name: '{name}' | Original: '{original_result}' | New: '{new_result}' | Match: {original_result == new_result}")
    
    # Count matches
    matches = sum(1 for result in category_comparison.values() if result['match'])
    match_percentage = (matches / len(small_sample)) * 100
    
    logger.info(f"\nDetailed category comparison:")
    logger.info(f"Total names compared: {len(small_sample)}")
    logger.info(f"Exact matches: {matches} ({match_percentage:.2f}%)")
    logger.info(f"Differences: {len(small_sample) - matches} ({100 - match_percentage:.2f}%)")
    
    # Assert high consistency - adjusted tolerance for realistic comparison
    assert match_percentage >= 75.0, f"Methods should have at least 75% consistency, got {match_percentage:.2f}%"
    
    return category_comparison

if __name__ == "__main__":
    # This allows running the test directly
    import sys
    sys.path.append(str(Path(__file__).parent.parent / "project_code"))
    
    # Load sample data
    csv_path = Path(__file__).parent.parent / "data" / "clean" / "bautismos_clean.csv"
    df = pd.read_csv(csv_path)
    father_names = df['father_name'].dropna()
    father_names = father_names[father_names != '']
    sample_names = father_names.sample(n=100, random_state=42).reset_index(drop=True)
    
    # Run tests
    print("Running gender inference performance comparison...")
    test_gender_inference_performance_comparison(sample_names)
    print("Test completed! Check logs/test_results/ for detailed results.")
